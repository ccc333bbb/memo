---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// 水墨風格個人首頁組件
const avatarUrl = new URL('avatar.jpg', Astro.site || 'http://localhost:4321').href.replace(Astro.site?.origin || 'http://localhost:4321', import.meta.env.BASE_URL);
---

<div class="container">
	<div class="ink-bg"></div>
	<div class="mountains"></div>
	
	<!-- Floating particles -->
	<div class="particle"></div>
	<div class="particle"></div>
	<div class="particle"></div>
	<div class="particle"></div>
	
	<div class="main-content">
		<div class="portrait-frame">
			<div class="portrait"></div>
		</div>
		
		<h1 class="name">{t('home.name')}</h1>
		<p class="title">{t('home.title')}</p>
		
		<div class="quote-section">
			<p class="quote">
				{t('home.quote')}
			</p>
			<p class="quote-author">— {t('home.quote.author')}</p>
		</div>
	</div>
</div>

<style>
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}
	
	.container {
		position: relative;
		min-height: 100vh;
		display: flex;
		align-items: center;
		justify-content: center;
		background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
		overflow-x: hidden;
	}
	
	/* Ink wash background effect */
	.ink-bg {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: 
			radial-gradient(ellipse at 20% 30%, rgba(0,0,0,0.1) 0%, transparent 50%),
			radial-gradient(ellipse at 80% 70%, rgba(0,0,0,0.08) 0%, transparent 60%),
			radial-gradient(ellipse at 60% 20%, rgba(0,0,0,0.05) 0%, transparent 40%);
		z-index: 1;
	}
	
	/* Mountain silhouette using CSS */
	.mountains {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 40%;
		background: 
			linear-gradient(to top, rgba(0,0,0,0.3) 0%, transparent 100%),
			url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 400"><path d="M0,400 L0,200 Q150,100 300,150 Q450,80 600,120 Q750,60 900,100 Q1050,40 1200,80 L1200,400 Z" fill="rgba(0,0,0,0.15)"/><path d="M0,400 L0,250 Q200,180 400,200 Q600,150 800,180 Q1000,120 1200,150 L1200,400 Z" fill="rgba(0,0,0,0.1)"/></svg>') no-repeat center bottom;
		background-size: cover;
		z-index: 2;
	}
	
	.main-content {
		position: relative;
		z-index: 10;
		text-align: center;
		padding: 2rem;
		max-width: 800px;
		width: 100%;
	}
	
	.portrait-frame {
		position: relative;
		width: 200px;
		height: 200px;
		margin: 0 auto 2rem;
		border-radius: 50%;
		background: 
			conic-gradient(from 0deg, rgba(0,0,0,0.1), rgba(0,0,0,0.3), rgba(0,0,0,0.1)),
			linear-gradient(145deg, #ffffff, #e6e6e6);
		padding: 8px;
		box-shadow: 
			0 20px 40px rgba(0,0,0,0.1),
			inset 0 2px 4px rgba(255,255,255,0.8);
		animation: float 6s ease-in-out infinite;
	}
	
	.portrait {
		width: 100%;
		height: 100%;
		border-radius: 50%;
		background-image: url('/memo/avatar.jpg');
		background-size: cover;
		background-position: center;
		box-shadow: inset 0 2px 8px rgba(0,0,0,0.2);
		position: relative;
		overflow: hidden;
	}
	
	.portrait::after {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: 
			radial-gradient(ellipse at 30% 30%, rgba(255,255,255,0.3) 0%, transparent 50%),
			radial-gradient(ellipse at 70% 70%, rgba(0,0,0,0.1) 0%, transparent 60%);
	}
	
	.name {
		font-family: 'Noto Serif SC', serif;
		font-size: 2.5rem;
		font-weight: 300;
		color: #2c3e50;
		margin-bottom: 0.5rem;
		text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
		animation: fadeInUp 1s ease-out 0.5s both;
	}
	
	.title {
		font-size: 1.2rem;
		color: #7f8c8d;
		margin-bottom: 2rem;
		font-weight: 300;
		animation: fadeInUp 1s ease-out 0.7s both;
	}
	
	.quote-section {
		background: rgba(255, 255, 255, 0.9);
		backdrop-filter: blur(10px);
		border-radius: 20px;
		padding: 2rem;
		margin: 2rem 0;
		box-shadow: 
			0 15px 35px rgba(0,0,0,0.1),
			0 5px 15px rgba(0,0,0,0.05);
		border: 1px solid rgba(255,255,255,0.2);
		animation: fadeInUp 1s ease-out 0.9s both;
		position: relative;
	}
	
	.quote-section::before {
		content: '"';
		position: absolute;
		top: -10px;
		left: 20px;
		font-size: 4rem;
		color: rgba(0,0,0,0.1);
		font-family: serif;
	}
	
	.quote {
		font-family: 'Noto Serif SC', serif;
		font-size: 1.3rem;
		line-height: 1.8;
		color: #2c3e50;
		margin-bottom: 1rem;
		font-style: italic;
	}
	
	.quote-author {
		font-size: 1rem;
		color: #7f8c8d;
		text-align: right;
		font-weight: 500;
	}
	
	/* Floating particles effect */
	.particle {
		position: absolute;
		background: rgba(0,0,0,0.1);
		border-radius: 50%;
		animation: float-particle 20s infinite linear;
	}
	
	.particle:nth-child(1) { width: 4px; height: 4px; left: 10%; animation-delay: 0s; }
	.particle:nth-child(2) { width: 6px; height: 6px; left: 30%; animation-delay: 5s; }
	.particle:nth-child(3) { width: 3px; height: 3px; left: 60%; animation-delay: 10s; }
	.particle:nth-child(4) { width: 5px; height: 5px; left: 85%; animation-delay: 15s; }
	
	@keyframes float {
		0%, 100% { transform: translateY(0) rotate(0deg); }
		50% { transform: translateY(-10px) rotate(2deg); }
	}
	
	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(30px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
	
	@keyframes float-particle {
		0% { 
			transform: translateY(100vh) rotate(0deg);
			opacity: 0;
		}
		10% { opacity: 1; }
		90% { opacity: 1; }
		100% { 
			transform: translateY(-100px) rotate(360deg);
			opacity: 0;
		}
	}
	
	/* Responsive design */
	@media (max-width: 768px) {
		.main-content {
			padding: 1rem;
		}
		
		.name {
			font-size: 2rem;
		}
		
		.quote {
			font-size: 1.1rem;
		}
		
		.portrait-frame {
			width: 150px;
			height: 150px;
		}
	}
</style>

<script>
	// Add subtle parallax effect on mouse move
	document.addEventListener('mousemove', (e) => {
		const mouseX = e.clientX / window.innerWidth;
		const mouseY = e.clientY / window.innerHeight;
		
		const inkBg = document.querySelector('.ink-bg') as HTMLElement;
		const mountains = document.querySelector('.mountains') as HTMLElement;
		
		if (inkBg && mountains) {
			inkBg.style.transform = `translate(${mouseX * 20}px, ${mouseY * 20}px)`;
			mountains.style.transform = `translateX(${mouseX * 30}px)`;
		}
	});
	
	// Add scroll reveal effect for mobile
	const observerOptions = {
		threshold: 0.1,
		rootMargin: '0px 0px -50px 0px'
	};
	
	const observer = new IntersectionObserver((entries) => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				const target = entry.target as HTMLElement;
				target.style.opacity = '1';
				target.style.transform = 'translateY(0)';
			}
		});
	}, observerOptions);
	
	// Observe elements for animation
	document.querySelectorAll('.main-content > *').forEach(el => {
		observer.observe(el);
	});
	
</script>
